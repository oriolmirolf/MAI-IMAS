emergency_doctor_task:
  description: >
    First, use the FileReadTool only once to read a file containing information about the fire emergency.
    Second, using the information from the file read, evaluate the severity of each injured person and classify their injury in one of the
    following three categories: "Nurse Check", "Hospitalization" and "ICU".
    'Nurse Check': Being attended by the ambulance nurses is sufficient.
    'Hospital Check': The person needs to go to the hospital, but not ICU.
    'ICU': The person needs Intensive Care Unit (ICU) because they are very injured.
  expected_output: >
    For each injured person you must state their id, injury and requirement. 
    You MUST use the following output structure:
    * Person {1st_injured_id} with injury {state their injury} needs {Nurse Check/Hospitalization/ICU}.
    * Person {2nd_injured_id} with injury {state their injury} needs {Nurse Check/Hospitalization/ICU}.
    ...
  agent: emergency_doctor_agent


ambulance_select_task:
  description: >
    First, decide how many ambulances N are required for the fire emergency (one ambulance for each injured person needing 
    Hospitalization or ICU).
    Second, use the AmbulanceSelectorTool to obtain the N closest ambulances ids to the fire emergency and their distances.
  expected_output: >
    For each injured person state their requirement (Nurse Check, Hospitalization or ICU), the ambulance id that it was assigned,
    the ambulance starting location and its travel distance.
    You MUST use the following output structure:
    * Injured {1st_injured_id} requiring {1st_injured_requirement} was assigned to {1st_ambulance_id}.
          Ambulance {1st_ambulance_id} starts at {1st_ambulance_location} and has a travel distance of {1st_ambulance_distance} meters.
    * Injured {2nd_injured_id} requiring {2nd_injured_requirement} was assigned to {2nd_ambulance_id}.
          Ambulance {2nd_ambulance_id} starts at {2nd_ambulance_location} and has a travel distance of {2nd_ambulance_distance} meters.
    ...
  agent: ambulance_selector_agent
# TODO: Add an ambulance for every 4 persons needing nurse check (NÂº ambulances nurse check = 4 / n_persons_needing_nurse_check)


hospital_assign_task:
  description: >
    First, use the FileReadTool only once to read a file containing information about the hospitals and their capacities.
    Then, assign one hospital to each of the ambulances selected by the previous agent.
    You MUST take into account the hospitals capacities (for example, if the injured needs ICU, the hospital assigned 
    must have one ICU room available).
  expected_output: >
    For each ambulance assign them to a hospital. You MUST use the following output structure:
    * Ambulance {1st_ambulance_id} transporting injured {1st_injured_id} requiring {1st_injured_requirement} was assigned to hospital {hospital_id} in room {room_id}.
          Ambulance {1st_ambulance_id} starts at {1st_ambulance_location} and has a travel distance of {previous_calculated_ambulance_distance} meters.
          Ambulance {1st_ambulance_id} ends at {hospital_assigned_location} and has a travel distance of {1st_ambulance_distance} meters.
    * Ambulance {1st_ambulance_id} transporting injured {2nd_injured_id} requiring {1st_injured_requirement} was assigned to hospital {hospital_id} in room {room_id}.
          Ambulance {2nd_ambulance_id} starts at {2nd_ambulance_location} and has a travel distance of {previous_calculated_ambulance_distance} meters.
          Ambulance {2nd_ambulance_id} ends at {hospital_assigned_location} and has a travel distance of {2nd_ambulance_distance} meters.
    ...
  agent: hospital_assigner_agent


route_navigate_task:
  description: >
    First, use the RouteNavigatorTool only once to compute the route for each ambulance from its starting location
    to the fire emergency, and from the fire emergency to its assigned hospital. 
  expected_output: >
    Show each calculated route.

  agent: hospital_navigator_agent


medical_plan_task:
  description: >
    Produce the final medical plan by aggregating the outputs from both 
    the Ambulance branch and the Hospital branch. Ensure a coherent, end-to-end 
    proposal from dispatch to final patient handoff. 
  expected_output: >
    A single unified plan for the Medical Services Crew that includes ambulance 
    assignments, hospital assignments, and any relevant route or timing 
    information.
  agent: medical_planner_agent
